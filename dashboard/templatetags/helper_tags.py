from django.template import Library, Node  # , resolve_variable

register = Library()

"""
From https://djangosnippets.org/snippets/2428/

The tag generates a parameter string in form '?param1=val1&param2=val2'.
The parameter list is generated by taking all parameters from current
request.GET and optionally overriding them by providing parameters to the tag.

This is a cleaned up version of http://djangosnippets.org/snippets/2105/. It
solves a couple of issues, namely:
 * parameters are optional
 * parameters can have values from request, e.g. request.GET.foo
 * native parsing methods are used for better compatibility and readability
 * shorter tag name

Usage: place this code in your appdir/templatetags/add_get_parameter.py
In template:
{% load add_get_parameter %}
<a href="{% add_get param1='const' param2=variable_in_context %}">
Link with modified params
</a>

It's required that you have 'django.core.context_processors.request' in
TEMPLATE_CONTEXT_PROCESSORS

Original version's URL: http://django.mar.lt/2010/07/add-get-parameter-tag.html
"""


class AddGetParameter(Node):
	def __init__(self, values):
		self.values = values

	def render(self, context):
		# req = resolve_variable('request', context)
		req = context['request']
		params = req.GET.copy()
		for key, value in self.values.items():
			params[key] = value.resolve(context)
		return '?%s' % params.urlencode()


@register.tag
def add_get(parser, token):
	pairs = token.split_contents()[1:]
	values = {}
	for pair in pairs:
		s = pair.split('=', 1)
		values[s[0]] = parser.compile_filter(s[1])
	return AddGetParameter(values)


@register.inclusion_tag('template_tags/render_object.html')
def render_object(object):
	return {
		'object': object,
		'field_list': object._meta.get_fields(),
		'title_class': 'col-1',
		'value_class': 'col-5',
	}


@register.inclusion_tag('template_tags/render_form.html', takes_context=True)
def render_form(context, form=None, has_adder=None, label_class='col-2', input_class='col-4', checkbox_class='col-3', *args, **kwargs):
	if not form:
		form = context['form']
	if has_adder:
		has_adder = has_adder.split(',')
	return {
		'form': form,
		'label_class': label_class,
		'input_class': input_class,
		'checkbox_class': checkbox_class,
		'has_adder': has_adder
	}


@register.inclusion_tag('template_tags/create_object_modal.html')
def create_object(form, model_name, req_url_name, persian_label):
	from django.urls import reverse
	return {
		'form': form,
		'model_name': model_name,
		'req_url': reverse(req_url_name),
		'persian_label': persian_label

	}


@register.inclusion_tag('template_tags/load_datatable.html')
def load_datatable():
	return {
	}


@register.inclusion_tag('template_tags/init_datatable.html')
def init_datatable(table_id):
	return {
		'table_id': table_id
	}


@register.filter
def sub(value, arg):
	return value - arg
